public enum Direction {
    UNKNOWN, UP, DOWN, LEFT, RIGHT
}
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Main {
    public static void main (String[] args) {
        StateMachine stateMachine = new StateMachine();

        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(1234);
        } catch (IOException e) {
            e.printStackTrace();
        }
        log("Server is listening on port 1234");
        ServerSocket finalServerSocket = serverSocket;
        new Thread(() -> {
            while (true) {
                try {
                    Socket clientSocket = finalServerSocket.accept();
                    log("New client joined");
                    new ServerWorker(clientSocket).start();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        ).start();
    }

    private static void log(String message) {
        System.out.println("[SERVER]: " + message);
    }

}
import java.security.InvalidParameterException;

public class Position {
    int x;
    int y;

    public Position (Integer x, Integer y) {
        this.x = x;
        this.y = y;
    }

    public Position(String position) throws Exception {
        String delims = " ";
        String [] tokens = position.split(delims);
        if (tokens.length != 3 || !tokens[0].equals("OK"))
            throw new InvalidParameterException(position);
        try {
            x = Integer.parseInt(tokens[1]);
            y = Integer.parseInt(tokens[2]);
        } catch (NumberFormatException nfe) {
            throw new InvalidParameterException(position);
        }
        if (!position.endsWith(tokens[2]))
            throw new InvalidParameterException(position);
    }


    boolean isEqual (Position pos) {
        return pos.x == x && pos.y == y;
    }
}
import java.io.Serializable;

public class Response implements Serializable {
    private String response;
    private Boolean close = false;

    public Response(String response, boolean close) {
        this.response = response;
        this.close = close;
    }
    public Response(String response) {
        this.response = response;
    } // add close

    public String getResponse() {
        return response;
    }

    public Boolean getClose() {
        return close;
    }

    public void setClose(Boolean close) {
        this.close = close;
    }
}
public class Robot {
    public Position oldPosition;
    public Direction direction;
    private String keyId;
    private Integer hash;
    private String name;
    Boolean recharging;
    Boolean hasTurned = false;
    int obstacleCase = 0;

    Robot (String name) {
        this.name = name;
        this.direction = Direction.UNKNOWN;
        this.oldPosition = null;
        this.hash = -1;
        this.keyId = null;
        this.recharging = false;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer calculateHash () {
        hash = 0;
        for (int i = 0; i < name.length(); i++) {
            hash += name.charAt(i);
        }
        hash = (hash * 1000) % 65536;
        System.out.println(hash);
        return hash;
    }

    public Integer calculateCode (String keyId) {
        this.keyId = keyId;
        try {
            double d = Integer.parseInt(keyId);
        } catch (NumberFormatException nfe) {
            return -2;
        }
        Integer serverCode = Util.getServerKey(keyId);
        if (serverCode == -1)
            return -1;
        return (serverCode + calculateHash()) % 65536;
    }


    public boolean compareCode (String clientCode) {
        Integer clientCod = Integer.parseInt(clientCode);
        clientCod = Math.floorMod(clientCod - Util.getClientKey(keyId), 65536);
        return clientCod.equals(hash);
    }

    public String move1 (Position newPosition) {
        System.out.println(newPosition.x + " " + newPosition.y);
        if (oldPosition.isEqual(newPosition) && !hasTurned) {
            obstacleCase = 0;
            hasTurned = false;
            return new String("OBSTACLE");
        } else {
            oldPosition = newPosition;
            hasTurned = false;
            return Util.SERVER_MOVE;
        }
    }

    public String turn (Position newPosition) {
        System.out.println(direction);

        if (direction == Direction.UNKNOWN) {
            obstacleCase = 0;
            return "OBSTACLE";
        }
        direction = turnRight();
        hasTurned = true;
        return Util.SERVER_TURN_RIGHT;
    }

    public String move (String position){
        Position newPosition;
        try {
            newPosition = new Position(position);
        } catch (Exception e) {
            return null;
        }

        if (newPosition.isEqual(Util.goal))
            return new String("GOAL");
        if (oldPosition == null) {
            oldPosition = newPosition;
            return Util.SERVER_MOVE;
        } else if (direction == Direction.UNKNOWN) {
            direction = determineDirection(newPosition);
        }
        String res;
        if (checkDirection(newPosition)) {
            System.out.println(direction);
            res = turn(newPosition);
        } else {
            res = move1(newPosition);
        }
        return res;
    }


    public String moveObstacleR(String position) {
        Position newPosition;
        try {
            newPosition = new Position(position);
        } catch (Exception e) {
            return Util.SERVER_SYNTAX_ERROR;
        }
        System.out.println(newPosition.x + " " + newPosition.y);
        System.out.println(direction);
        if (newPosition.isEqual(Util.goal))
            return new String("GOAL");
        switch (obstacleCase) {
            case 0 :
                turnRight();
                obstacleCase++;
                oldPosition = newPosition;
                return Util.SERVER_MOVE;
            case 2 :
                obstacleCase++;
                oldPosition = newPosition;
                return Util.SERVER_MOVE;
            case 1 :
                obstacleCase++;
                direction = determineDirection(newPosition);
                direction = turnRight();
                direction = turnRight();
                direction = turnRight();
                return Util.SERVER_TURN_LEFT;
        }
        if (checkDirection(newPosition)) {
            System.out.println(direction);
            direction = turnRight();
            hasTurned = true;
            return Util.SERVER_TURN_RIGHT;
        }
        oldPosition = newPosition;
        return Util.SERVER_MOVE;
    }

    public String moveObstacleL(String position) {
        Position newPosition;
        try {
            newPosition = new Position(position);
        } catch (Exception e) {
            return Util.SERVER_SYNTAX_ERROR;
        }
        System.out.println(newPosition.x + " " + newPosition.y);
        System.out.println(direction);
        if (newPosition.isEqual(Util.goal))
            return new String("GOAL");
        switch (obstacleCase) {
            case 0 :
                turnRight();
                turnRight();
                turnRight();
                obstacleCase++;
                oldPosition = newPosition;
                return Util.SERVER_MOVE;
            case 2 :
                obstacleCase++;
                oldPosition = newPosition;
                return Util.SERVER_MOVE;
            case 1 :
                obstacleCase++;
                direction = determineDirection(newPosition);
                direction = turnRight();
                return Util.SERVER_TURN_RIGHT;
        }
        if (checkDirection(newPosition)) {
            System.out.println(direction);
            hasTurned = true;
            direction = turnRight();
            return Util.SERVER_TURN_RIGHT;
        }
        oldPosition = newPosition;
        return Util.SERVER_MOVE;
    }

    private Direction turnRight () {
        if (direction.equals(Direction.UP))
            return Direction.RIGHT;
        if (direction.equals(Direction.RIGHT))
            return  Direction.DOWN;
        if (direction.equals(Direction.DOWN))
            return Direction.LEFT;
        if (direction.equals(Direction.LEFT))
            return Direction.UP;
        return Direction.UNKNOWN;
    }

    private Direction determineDirection(Position newPosition) {
        if (newPosition.x < oldPosition.x) {
            return Direction.LEFT;
        } else if (newPosition.x > oldPosition.x) {
            return Direction.RIGHT;
        }  else if (newPosition.y > oldPosition.y) {
            return Direction.UP;
        } else if (newPosition.y < oldPosition.y) {
            return Direction.DOWN;
        } else {
            return Direction.UNKNOWN;
        }
    }

    private Boolean checkDirection (Position newPosition) {
        if (direction == Direction.UNKNOWN) {
            return true;
        }
        if (newPosition.x < Util.goal.x && direction != Direction.RIGHT)
            return true;
        else if (newPosition.x > Util.goal.x && direction != Direction.LEFT)
            return true;
        if (newPosition.x == Util.goal.x) {
             if (newPosition.y > Util.goal.y && direction != Direction.DOWN)
                return true;
            else if (newPosition.y < Util.goal.y && direction != Direction.UP)
                return true;
        }
        return false;
    }

    public void setRecharging(Boolean recharging) {
        this.recharging = recharging;
    }

}
  import java.io.*;
import java.net.Socket;
import java.util.Scanner;

public class ServerWorker {
    private final Socket clientSocket;

    private final StateMachine stateMachine;

    private Response response;

    Scanner in;

    DataOutputStream out;

    String buff;

    public ServerWorker(Socket clientSocket) {
        this.clientSocket = clientSocket;
        this.stateMachine = new StateMachine();
        this.response = null;
        this.buff = new String("");
    }


    public void start() {
        new Thread(this::work).start();
    }

    protected void work() {
        try (Scanner in = new Scanner (new BufferedReader( new InputStreamReader(clientSocket.getInputStream()))).useDelimiter("\u0007\u0008");
             PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)
        ) {
            while (true) {
                response = null;
                clientSocket.setSoTimeout(stateMachine.getTimeout());
                if (in.hasNext() && !in.hasNext(".*\\z") ) { //message until delimiter or end
                   response =  stateMachine.makeResponse(in.next());
                   buff = "";
                } else { //message not complete
                    buff = buff.concat(in.next());
                    if (!stateMachine.validMessage(buff)) {
                       response = new Response(Util.SERVER_SYNTAX_ERROR, true);
                    }
                }
                if (response != null) {
                    System.out.println(response.getResponse());
                    out.write(response.getResponse());
                    out.flush();

                    if (response.getClose()) {
                        //close();
                        break;
                    }
                }
            }
        } catch (Exception e) {
           e.printStackTrace();
            //close();
        }
        close();
    }

    private void close(){
        try {
            System.out.println("Close");
            clientSocket.close();
            //out.close();
            //in.close();
        }catch (Exception e){
            System.out.println("Can't close" + e);
        }
    }

}
  public enum State {
    USERNAME, KEY, CONFIRMATION, MOVE, FIRST_MOVE, SECOND_MOVE, OBSTACLE ,PICK_UP, RECHARGING
}
 public class StateMachine {
    private State state;

    private final Robot robot;

    private Response response;

    public StateMachine() {
        this.state = State.USERNAME;
        this.robot = new Robot("unk");
    }

    public Response makeResponse (String message) {
        System.out.println("Get response " + state);

        if (robot.recharging) {
            return checkRecharging(message);
        }

        if (message.equals("RECHARGING")) {
            robot.setRecharging(true);
            return null;
        }

        switch (state) {
            case USERNAME:
                if (!Util.validName(message)) {
                    System.out.println("Too long username");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                robot.setName(message);
                state = State.KEY;
                System.out.println("Username valid " + message);
                return new Response(Util.SERVER_KEY_REQUEST);
            case KEY:
                if (!Util.validId(message)) {
                    System.out.println("Too long keyId");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                Integer code = robot.calculateCode(message);
                if (code == -1) {
                    System.out.println("Invalid key " + message + code);
                    return new Response(Util.SERVER_KEY_OUT_OF_RANGE_ERROR, true);
                } else if (code == -2) {
                    System.out.println("Invalid key " + message + code);
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                state = State.CONFIRMATION;
                System.out.println("Key valid" + code.toString());
                return new Response(code.toString() + "\u0007\u0008");
            case CONFIRMATION:
                if (!Util.validConfirmation(message)) {
                    System.out.println("Too long keyConfirmation");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                if (!robot.compareCode(message))
                    return new Response(Util.SERVER_LOGIN_FAILED, true);
                System.out.println("Authentification ok");
                state = State.FIRST_MOVE;
                return new Response(Util.SERVER_OK + Util.SERVER_MOVE);
            case FIRST_MOVE:
                if (!Util.validOk(message)) {
                    System.out.println("Too long OK");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                String move = robot.move(message);
                if (move == null) {
                    System.out.println("Inv ok");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }

                if (move.equals("GOAL")) {
                    state = State.PICK_UP;
                    return new Response(Util.SERVER_PICK_UP);
                }
                if (move.equals("OBSTACLE")) {
                    state = State.OBSTACLE;
                    switch (robot.direction) {
                        case DOWN:
                            if (robot.oldPosition.x >= Util.goal.x) {
                                return new Response(Util.SERVER_TURN_RIGHT);
                            } else
                                return new Response(Util.SERVER_TURN_LEFT);
                        case UP :
                            if (robot.oldPosition.x < Util.goal.x) {
                                return new Response(Util.SERVER_TURN_RIGHT);
                            } else
                                return new Response(Util.SERVER_TURN_LEFT);
                        case RIGHT:
                            if (robot.oldPosition.y >= Util.goal.y) {
                                return new Response(Util.SERVER_TURN_RIGHT);
                            } else
                                return new Response(Util.SERVER_TURN_LEFT);
                        case LEFT:
                            if (robot.oldPosition.y < Util.goal.y) {
                                return new Response(Util.SERVER_TURN_RIGHT);
                            } else
                                return new Response(Util.SERVER_TURN_LEFT);
                        default:
                            return new Response(Util.SERVER_TURN_RIGHT);
                    }
                }
                return new Response(move);
            case OBSTACLE:
                if (!Util.validOk(message)) {
                    System.out.println("Too long OK");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                if (robot.obstacleCase == 3)
                    state = State.FIRST_MOVE;
                String resp;
                switch (robot.direction) {
                    case DOWN:
                        if (robot.oldPosition.x >= Util.goal.x) {
                            resp = robot.moveObstacleR(message);
                        } else
                            resp =  robot.moveObstacleL(message);
                        break;
                    case UP :
                        if (robot.oldPosition.x < Util.goal.x) {
                            resp =  robot.moveObstacleR(message);
                        } else
                            resp =  robot.moveObstacleL(message);
                        break;
                    case RIGHT:
                        if (robot.oldPosition.y >= Util.goal.y) {
                            resp =  robot.moveObstacleR(message);
                        } else
                            resp =  robot.moveObstacleL(message);
                        break;
                    case LEFT:
                        if (robot.oldPosition.y < Util.goal.y) {
                            resp =  robot.moveObstacleR(message);
                        } else
                            resp =  robot.moveObstacleL(message);
                        break;
                    case UNKNOWN:
                        resp =  robot.moveObstacleR(message);
                        break;
                    default:
                        throw new IllegalStateException("Unexpected value: " + robot.direction);
                }
                    if (resp.equals("GOAL")) {
                    state = State.PICK_UP;
                    return new Response(Util.SERVER_PICK_UP);
                }
                return new Response(resp);
            case PICK_UP:
                if (!Util.validMessage(message)) {
                    System.out.println("Inv message");
                    return new Response(Util.SERVER_SYNTAX_ERROR, true);
                }
                Response res = new Response(Util.SERVER_LOGOUT);
                res.setClose(true);
                return res;
        }
        return new Response("");
    }

    public boolean validMessage(String message) {
        switch (state) {
            case USERNAME:
                if (!Util.validName(message)) {
                    System.out.println("Too long username");
                    return false;
                }
                return true;
            case KEY:
                if (!Util.validId(message)) {
                    System.out.println("Too long keyId");
                    return false;
                }
                return true;
            case CONFIRMATION:
                if (!Util.validConfirmation(message)) {
                    System.out.println("Too long keyConfirmation");
                    return false;
                }
                return true;
            case FIRST_MOVE:
            case OBSTACLE:
                if (!Util.validOk(message)) {
                    System.out.println("Too long OK");
                    return false;
                }
                return true;
            case PICK_UP:
                if (!Util.validMessage(message)) {
                    System.out.println("Inv message");
                    return false;
                }
                return true;
        }
        return true;
    }

    private Response checkRecharging(String message) {
        if (message.equals("FULL POWER")) {
            robot.setRecharging(false);
            return null;
        } else {
            return new Response(Util.SERVER_LOGIC_ERROR, true);
        }
    }

    public Integer getTimeout(){
        return 1000 * (robot.recharging ? Util.TIMEOUT_RECHARGING : Util.TIMEOUT);
    }
}
 import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;

public class Util {
    public static final Integer SERVER_CONFIRMATION =   0;
    public static final String SERVER_MOVE =           "102 MOVE\u0007\u0008";
    public static final String SERVER_TURN_LEFT =      "103 TURN LEFT\u0007\u0008";
    public static final String SERVER_TURN_RIGHT =     "104 TURN RIGHT\u0007\u0008";
    public static final String SERVER_PICK_UP =        "105 GET MESSAGE\u0007\u0008";
    public static final String SERVER_LOGOUT =         "106 LOGOUT\u0007\u0008";
    public static final String SERVER_KEY_REQUEST =    "107 KEY REQUEST\u0007\u0008";
    public static final String SERVER_OK =             "200 OK\u0007\u0008";
    public static final String SERVER_LOGIN_FAILED =   "300 LOGIN FAILED\u0007\u0008";
    public static final String SERVER_SYNTAX_ERROR =   "301 SYNTAX ERROR\u0007\u0008";
    public static final String SERVER_LOGIC_ERROR =    "302 LOGIC ERROR\u0007\u0008";
    public static final String SERVER_KEY_OUT_OF_RANGE_ERROR =    "303 KEY OUT OF RANGE\u0007\u0008";


    public static final Integer TIMEOUT =               1;
    public static final Integer TIMEOUT_RECHARGING = 	5;

    public static final Position goal = new Position(0, 0);



    private static final String[][] keys = {{"23019", "32037"}, {"32037", "29295"}, {"18789", "13603"},
            {"16443", "29533"}, {"18189", "21952"}};




    public static boolean validName (String name) {
        if (name.contains("\u0007\u0008"))
            return false;
        return name.length() <= 18;
    }

    public static boolean validId (String id) {
        return id.length() <= 3;
    }

    public static boolean validConfirmation (String conf) {
        try {
            Integer i = Integer.parseInt(conf);
        } catch (Exception e) {
            return false;
        }
        return conf.length() <= 5;
    }

    public static boolean validOk (String ok) {
        return ok.length() <= 10;
    }

    public static boolean validRecharging (String rechar) {
        return rechar.length() <= 10;
    }

    public static boolean validFull (String full) {
        return full.length() <= 10;
    }

    public static boolean validMessage (String mess) {
        return mess.length() <= 98;
    }

    public static Integer getServerKey (String keyID) {
        int k = Integer.parseInt(keyID);
        if (k > 4 || k < 0) {
            return -1;
        }
        return Integer.parseInt(keys[k][0]);
    }

    public static Integer getClientKey (String keyID) {
        return Integer.parseInt(keys[Integer.parseInt(keyID)][1]);
    }

}

